#pragma once
#include <map>
#include <vector>
#include <algorithm>
#include <iomanip> 

#include "../LexType.h"
#include <unordered_map>
#include <iostream>
class Freq {
    
	std::map<Lex, int> freqdict;
    int count;
    std::unordered_map<Lex, std::string> lexToStr = {
        {Lex::NAME, "идентификатор"},
        {Lex::NUMBER, "число"},
        {Lex::DECIMAL, "decimal"},
        {Lex::FLOAT, "float"},
        {Lex::DOUBLE, "double"},

        {Lex::STRINGLITERAL, "строковый литерал"},
        {Lex::CHARLITERAL, "символьный литерал"},
        {Lex::PREPROC_DIRECTIVE, "#"},

        // Операторы
        {Lex::PLUS, "+"},
        {Lex::MINUS, "-"},
        {Lex::MULT, "*"},
        {Lex::DIV, "/"},
        {Lex::MOD, "%"},
        {Lex::BITWISE_NOT, "~"},
        {Lex::BITWISE_XOR, "^"},
        {Lex::XOR_ASSIGN, "^="},
        {Lex::AND_ASSIGN, "&="},
        {Lex::OR_ASSIGN, "|="},
        {Lex::LSHIFT, "<<"},
        {Lex::RSHIFT, ">>"},
        {Lex::LSHIFT_ASSIGN, "<<="},
        {Lex::RSHIFT_ASSIGN, ">>="},
        {Lex::PLUS_ASSIGN, "+="},
        {Lex::MINUS_ASSIGN, "-="},
        {Lex::MULT_ASSIGN, "*="},
        {Lex::DIV_ASSIGN, "/="},
        {Lex::MOD_ASSIGN, "%="},
        {Lex::NULL_COALESCING_ASSIGN, "??="},
        {Lex::ASSIGN, "="},
        {Lex::EQ, "=="},
        {Lex::NE, "!="},
        {Lex::LT, "<"},
        {Lex::LE, "<="},
        {Lex::GT, ">"},
        {Lex::GE, ">="},
        {Lex::AND, "&&"},
        {Lex::OR, "||"},
        {Lex::NOT, "!"},
        {Lex::BITWISE_AND, "&"},
        {Lex::BITWISE_OR, "|"},
        {Lex::INCREMENT, "++"},
        {Lex::DECREMENT, "--"},
        {Lex::ARROW, "=>"},
        {Lex::QUESTION, "?"},
        {Lex::NULL_COALESCING, "??"},
        {Lex::NULL_CONDITIONAL , ".?"},
        {Lex::INTERPOLATED_STRING, "$"},
        {Lex::VERBATIM_STRING, "@"},

        // Разделители
        {Lex::DOT, "."},
        {Lex::COMMA, ","},
        {Lex::COLON, ":"},
        {Lex::SEMICOLON, ";"},
        {Lex::LPAREN, "("},
        {Lex::RPAREN, ")"},
        {Lex::LBRACE, "{"},
        {Lex::RBRACE, "}"},
        {Lex::LBRACKET, "["},
        {Lex::RBRACKET, "]"},

        {Lex::EOT, "конец файла"},

        //служебные слова
        {Lex::ABSTRACT, "abstract" },
        {Lex::AS, "as"},
        {Lex::BASE, "base"},
        {Lex::BOOL, "bool"},
        {Lex::BREAK, "break"},
        {Lex::BYTE, "byte"},
        {Lex::CASE, "case"},
        {Lex::CATCH, "catch"},
        {Lex::CHAR, "char"},
        {Lex::CHECKED, "checked"},
        {Lex::CLASS, "class"},
        {Lex::CONST, "const"},
        {Lex::CONTINUE, "continue"},
        {Lex::DECIMAL, "decimal"},
        {Lex::DEFAULT, "default"},
        {Lex::DELEGATE, "delegate"},
        {Lex::DO, "do"},
        {Lex::DOUBLE, "double"},
        {Lex::ELSE, "else"},
        {Lex::ENUM, "enum"},
        {Lex::EVENT, "event"},
        {Lex::EXPLICIT, "explicit"},
        {Lex::EXTERN, "extern"},
        {Lex::FALSE, "false"},
        {Lex::FINALLY, "finally"},
        {Lex::FIXED, "fixed"},
        {Lex::FLOAT, "float"},
        {Lex::FOR, "for"},
        {Lex::FOREACH, "foreach"},
        {Lex::GOTO, "goto"},
        {Lex::IF, "if"},
        {Lex::IMPLICIT, "implicit"},
        {Lex::IN, "in"},
        {Lex::INT, "int"},
        {Lex::INTERFACE, "interface"},
        {Lex::INTERNAL, "internal"},
        {Lex::IS, "is"},
        {Lex::LOCK, "lock"},
        {Lex::LONG, "long"},
        {Lex::NAMESPACE, "namespace"},
        {Lex::NEW, "new"},
        {Lex::NULL_, "null"},
        {Lex::OBJECT, "object"},
        {Lex::OPERATOR, "operator"},
        {Lex::OUT, "out"},
        {Lex::OVERRIDE, "override"},
        {Lex::PARAMS, "params"},
        {Lex::PRIVATE, "private"},
        {Lex::PROTECTED, "protected"},
        {Lex::PUBLIC, "public"},
        {Lex::READONLY, "readonly"},
        {Lex::REF, "ref"},
        {Lex::RETURN, "return"},
        {Lex::SBYTE, "sbyte"},
        {Lex::SEALED, "sealed"},
        {Lex::SHORT, "short"},
        {Lex::SIZEOF, "sizeof"},
        {Lex::STACKALLOC, "stackalloc"},
        {Lex::STATIC, "static"},
        {Lex::STRING, "string"},
        {Lex::STRUCT, "struct"},
        {Lex::SWITCH, "switch"},
        {Lex::THIS, "this"},
        {Lex::THROW, "throw"},
        {Lex::TRUE, "true"},
        {Lex::TRY, "try"},
        {Lex::TYPEOF, "typeof"},
        {Lex::UINT, "uint"},
        {Lex::ULONG, "ulong"},
        {Lex::UNCHECKED, "unchecked"},
        {Lex::UNSAFE, "unsafe"},
        {Lex::USHORT, "ushort"},
        {Lex::USING, "using"},
        {Lex::VIRTUAL, "virtual"},
        {Lex::VOID, "void"},
        {Lex::VAR, "var"},
        {Lex::VOLATILE, "volatile"},
        {Lex::WHILE, "while"},
    };

public:
	void put(Lex);
	void print();
};